import React from 'react';
import styles from './Pages.module.css';




const arrBasicConceptsOfFlux = [
    {
        title: 'Action (Действие):',
        text: `Действие представляет собой объект, который содержит информацию о том,
     что произошло в приложении. Он описывает намерение внести изменения 
     в состояние. Действие отправляется в Dispatcher (Диспетчер).`
    },
    {
        title: 'Dispatcher (Диспетчер): ',
        text: `Диспетчер является центральной частью архитектуры Flux.
         Он принимает действия от приложения и распространяет их на
          зарегистрированные обработчики (Stores).`
    },
    {
        title: 'Store (Хранилище):',
        text: ` Хранилище содержит состояние приложения и обрабатывает действия.
         Каждое хранилище отвечает за определенную часть состояния.
          Оно реагирует на действия, обновляет свое состояние и 
          уведомляет представление о изменениях.`
    },
    {
        title: 'View (Представление):',
        text: `Представление отображает данные из хранилища и реагирует
         на изменения состояния. Когда представление инициирует действие,
          оно отправляется в диспетчер, который затем передает 
          его хранилищам для обновления состояния.`
    },
    {
        title: `Однонаправленный поток данных: `,
        text: `Данные в архитектуре Flux движутся в одном направлении,
         от представления к хранилищу через диспетчер. Это помогает 
         предсказуемости и контролю изменений состояния.`
    }
];



const arrBasicPrinciplesRedux = [
    {
        title: 'Однонаправленный поток данных: ',
        text: `В Redux данные в приложении движутся в одном направлении, 
    от действий (actions) к хранилищу (store),
     а затем к представлениям (views).`
    },
    {
        title: 'Хранилище (Store):',
        text: `В Redux есть одно глобальное хранилище, 
    которое содержит все данные приложения. 
    Это хранилище является единственным источником правды 
    о состоянии приложения.`
    },
    {
        title: 'Действия (Actions): ',
        text: `Действия - это чистые объекты,
     описывающие что-то произошло в приложении.
     Они отправляются из представлений к хранилищу.`
    },
    {
        title: 'Редьюсеры (Reducers):',
        text: ` Редьюсеры - это чистые функции, 
    которые принимают текущее состояние и действие, 
    и возвращают новое состояние. Они обрабатывают действия и определяют,
    как изменить состояние хранилища.`
    },
    {
        title: 'Представления (Views): ',
        text: `Представления в Redux отображают данные из хранилища. 
        Когда состояние меняется, представления перерисовываются автоматически.`
    },
    {
        title: 'Неизменяемость (Immutability)',
        text: `Для обеспечения предсказуемости и легкости отслеживания изменений Redux 
        рекомендует использовать неизменяемые (immutable) структуры данных.`
    }

]

const terminFlux = (
    <div>
        <p>
            <span>Flux</span> - это паттерн архитектуры, разработанный Facebook,
            который предлагает <strong>однонаправленный поток</strong> данных в приложениях.
            Он помогает управлять состоянием и обновлениями интерфейса,
            особенно в больших и сложных приложениях.
        </p>
        <h2>Чем же крута архитектура FLUX?</h2>
        <p>
            Архитектура предоставляет <span>Глобальное хранилище</span>  в приложениях для управления данными,
            которые должны быть <strong> доступными для нескольких компонентов.</strong>
        </p>
    </div>
);


const basicConceptsOfFluxBlock = (
    <div>
        <h2>Основные концепции архитектуры FLUX:</h2>
        <ul>
            {arrBasicConceptsOfFlux.map((item, index) => {
                return (
                    <li key={index}>
                        <span>{item.title}</span>
                        <p>{item.text}</p>
                    </li>
                );
            })}
        </ul>
    </div>
)

const fluxReduxBlock = (
    <div>
        <div>
            <h2>Как Flux связан с Redux?</h2>
            <p>
                Redux представляет собой библиотеку управления состоянием приложения,
                основанную на концепциях архитектуры Flux, но с некоторыми
                дополнительными идеями и упрощениями.
            </p>
        </div>
        <ul>
            {arrBasicPrinciplesRedux.map((item, i) => {
                return (
                    <li key={i}>
                        <span>{item.title}</span>
                        <p>{item.text}</p>
                    </li>
                )
            })}
        </ul>
        <p className='pt-5'>
            <strong>Redux</strong> также поддерживает механизмы для управления асинхронными действиями,
            разделения состояния на модули, использования middleware для обработки действий, но про это все дальше…
        </p>
    </div>
);





const FluxComponent = () => {

    return (
        <div className={styles.contain} >
            <h1>Flux</h1>
            {terminFlux}
            {basicConceptsOfFluxBlock}
            {fluxReduxBlock}

        </div>
    );
};

export default FluxComponent;